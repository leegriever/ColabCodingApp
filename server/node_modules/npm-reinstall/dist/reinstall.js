"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var caniuse_yarn_1 = __importDefault(require("@danielbayerlein/caniuse-yarn"));
var caniuse_pnpm_1 = __importDefault(require("caniuse-pnpm"));
var chalk_1 = __importDefault(require("chalk"));
var has_pnpm_1 = __importDefault(require("has-pnpm"));
var has_yarn_1 = __importDefault(require("has-yarn"));
var os_1 = require("os");
var createProgressMessage_1 = __importDefault(require("./lib/createProgressMessage"));
var noticeFallback_1 = __importDefault(require("./lib/noticeFallback"));
var run_1 = __importDefault(require("./lib/run"));
var runAll_1 = __importDefault(require("./lib/runAll"));
var red = chalk_1.default.red;
var canIUseYarn = caniuse_yarn_1.default();
var canIUsePNPM = caniuse_pnpm_1.default();
/**
 * Reinstall packages.
 *
 * @export
 * @param {Arguments<Argv>} argv Yargs' `argv`
 */
function reinstall(argv) {
    return __awaiter(this, void 0, void 0, function () {
        var yarnExists, pnpmExists, global, save, saveDev, forceYarn, forceNPM, forcePNPM, verbose, command, packages, mode, e_1, err, errMsg;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    yarnExists = has_yarn_1.default();
                    pnpmExists = has_pnpm_1.default();
                    global = argv.global;
                    save = argv.save;
                    saveDev = argv['save-dev'];
                    forceYarn = argv.yarn;
                    forceNPM = argv.npm;
                    forcePNPM = argv.pnpm;
                    verbose = argv.verbose;
                    command = 'npm';
                    if (!global) {
                        if (yarnExists) {
                            command = 'yarn';
                        }
                        else if (pnpmExists) {
                            command = 'pnpm';
                        }
                    }
                    // Force
                    if (forceNPM) {
                        command = 'npm';
                    }
                    else if (forceYarn) {
                        command = 'yarn';
                    }
                    else if (forcePNPM) {
                        command = 'pnpm';
                    }
                    // Checking yarn command
                    if (command === 'yarn' && !canIUseYarn) {
                        command = 'npm';
                        noticeFallback_1.default('yarn');
                    }
                    // Checking pnpm command
                    if (command === 'pnpm' && !canIUsePNPM) {
                        command = 'npm';
                        noticeFallback_1.default('pnpm');
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 6, , 7]);
                    if (!((global || save || saveDev) && argv._.length > 0)) return [3 /*break*/, 3];
                    packages = argv._;
                    mode = global ? 'GLOBAL' : save ? 'SAVE' : 'SAVE_DEV';
                    return [4 /*yield*/, run_1.default(command, mode, packages, verbose)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, runAll_1.default(command, verbose)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5: return [3 /*break*/, 7];
                case 6:
                    e_1 = _a.sent();
                    err = e_1;
                    errMsg = red("Error: " + (err.stack ? err.stack : err.toString()));
                    process.stderr.write("" + createProgressMessage_1.default('fail') + os_1.EOL);
                    process.stderr.write("" + errMsg + os_1.EOL);
                    return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.default = reinstall;
